// Mocks generated by Mockito 5.4.4 from annotations
// in document_generator/test/upload_file_screen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;
import 'dart:ui' as _i6;

import 'package:document_generator/frontend/models/file_model.dart' as _i3;
import 'package:document_generator/frontend/viewmodels/file_viewmodel.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileViewModel extends _i1.Mock implements _i2.FileViewModel {
  MockFileViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.FileModel> get latexFiles => (super.noSuchMethod(
        Invocation.getter(#latexFiles),
        returnValue: <_i3.FileModel>[],
      ) as List<_i3.FileModel>);

  @override
  List<_i3.FileModel> get pptFiles => (super.noSuchMethod(
        Invocation.getter(#pptFiles),
        returnValue: <_i3.FileModel>[],
      ) as List<_i3.FileModel>);

  @override
  List<_i3.FileModel> get notebookFiles => (super.noSuchMethod(
        Invocation.getter(#notebookFiles),
        returnValue: <_i3.FileModel>[],
      ) as List<_i3.FileModel>);

  @override
  bool get isProcessing => (super.noSuchMethod(
        Invocation.getter(#isProcessing),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> pickFiles() => (super.noSuchMethod(
        Invocation.method(
          #pickFiles,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.Uint8List> uploadFiles() => (super.noSuchMethod(
        Invocation.method(
          #uploadFiles,
          [],
        ),
        returnValue: _i4.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i4.Future<_i5.Uint8List>);

  @override
  void clearFiles() => super.noSuchMethod(
        Invocation.method(
          #clearFiles,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
